version: '3.8'
x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U ofbiz --dbname=ofbiz'
    interval: 10s
    timeout: 5s
    retries: 5

#x-logging: &default-logging
#  driver: loki
#  options:
#    loki-url: 'http://localhost:3100/api/prom/push'
#    loki-pipeline-stages: |
#      - multiline:
#          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
#          max_wait_time: 3s
#      - regex:
#          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

services:
#  loki:
#    extends:
#      file: ./config/docker/compose/observability.yml
#      service: loki
#  prometheus:
#    extends:
#      file: ./config/docker/compose/observability.yml
#      service: prometheus
#    depends_on:
#      - loki
#
#  grafana:
#    extends:
#      file: ./config/docker/compose/observability.yml
#      service: grafana
#    depends_on:
#      - loki
#
#  tempo:
#    extends:
#      file: ./config/docker/compose/observability.yml
#      service: tempo
#    depends_on:
#      - loki

  db:
    extends:
      file: ./config/docker/compose/mariadb.yml
      service: mariadb
#    depends_on:
#      - loki
#    logging: *default-logging

  web-app:
    image: shivain22/mifos-web-app:aurigraph
    restart: always
    environment:
      - FINERACT_API_URLS=https://finos-api.atparui.com
      - FINERACT_API_URL=https://finos-api.atparui.com
      - FINERACT_API_PROVIDER=/fineract-provider/api
      - FINERACT_API_VERSION=/v1
      - FINERACT_PLATFORM_TENANT_IDENTIFIER=default
      - MIFOS_DEFAULT_LANGUAGE=en-US
      - MIFOS_SUPPORTED_LANGUAGES=cs-CS,de-DE,en-US,es-MX,fr-FR,it-IT,ko-KO,lt-LT,lv-LV,ne-NE,pt-PT,sw-SW
      - MIFOS_PRELOAD_CLIENTS=true
      - MIFOS_DEFAULT_CHAR_DELIMITER=,
    ports:
      - 4200:80

  fineract:
    container_name: fineract-development
    extends:
      file: ./config/docker/compose/fineract.yml
      service: fineract
    ports:
      - "8443:8443"
      - "5000:5000"
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
#      loki:
#        condition: service_started
    environment:
      - FINERACT_SERVER_SSL_ENABLED=false
      - FINERACT_SERVER_PORT=8080
    env_file:
      - ./config/docker/env/aws.env
      - ./config/docker/env/fineract.env
      - ./config/docker/env/fineract-common.env
      - ./config/docker/env/fineract-mariadb.env
      - ./config/docker/env/tracing.env
      - ./config/docker/env/oltp.env
      - ./config/docker/env/prometheus.env
      # - ./config/docker/env/cloudwatch.env
      - ./config/docker/env/debug.env
#    logging: *default-logging

  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ofbiz
      POSTGRES_DB: ofbiz
      POSTGRES_PASSWORD: ofbiz
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on

    volumes:
#      - ./data/acm-db-data/postgres:/var/lib/postgresql/data
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGUSER: atparreplicator
      PGPASSWORD: atparreplicator
      POSTGRES_HOST_AUTH_METHOD: "md5"
#    volumes:
#      - ./data/acm-db-data/postgres-replica:/var/lib/postgresql/data
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary



  # ACM Database (MySQL)
  mysqldbauri:
    image: mysql:8.0.30
    container_name: acm-db
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: aurigraph
      MYSQL_DATABASE: AurigraphFarmers
    volumes:
      - ./data/acm-db-data/mysql:/var/lib/mysql

  # Ofbiz Application
  ofbiz:
    image: shivain22/ofbiz-docker:latest
    container_name: ofbiz-app
    restart: always
    environment:
#      DEFAULT_HOST: localhost
#      VIRTUAL_HOST: localhost
#      LETSENCRYPT_HOST: localhost
#      LETSENCRYPT_EMAIL: admin@example.com
      OFBIZ_POSTGRES_OFBIZ_DB: ofbiz                   # From postgres_primary
      OFBIZ_POSTGRES_OFBIZ_USER: ofbiz                         # From postgres_primary
      OFBIZ_POSTGRES_OFBIZ_PASSWORD: ofbiz                     # From postgres_primary

      OFBIZ_POSTGRES_OLAP_DB: ofbiz_olap                    # Add specific OLAP database name
      OFBIZ_POSTGRES_OLAP_USER: ofbizolap                 # From postgres_primary
      OFBIZ_POSTGRES_OLAP_PASSWORD: ofbizolap

      OFBIZ_POSTGRES_TENANT_DB: ofbiztenant                # Add specific tenant database name
      OFBIZ_POSTGRES_TENANT_USER: ofbiztenant
      OFBIZ_POSTGRES_TENANT_PASSWORD: ofbiztenant

      OFBIZ_POSTGRES_HOST: postgres_primary                    # Hostname of the primary database
      OFBIZ_DATA_LOAD: demo
    ports:
      - "8553:8443"
      - "8079:8089"
    depends_on:
      - postgres_primary


  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./redisdata:/data


  # ACM Backend
  aurigraph-farmers-app:
    image: shivain22/aurigraph-farmers-app:v18
    container_name: acm-backend
    restart: always
    ports:
      - "8005:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysqldbauri:3306/AurigraphFarmers?serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: aurigraph
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SECURITY_JWT_SECRET_KEY: 3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
      SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: 5GB
      SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: 5GB
      SPRING_SERVLET_MULTIPART_ENABLED: 'true'
#      AURIGRAPH_FARMERS_OPENAPI_DEV_URL: http://localhost:8085/
#      APP_FILE_TARGET_DIR: /mnt
#      RESOURCE_LOCATION: file:/mnt/content/

      aurigraph.farmers.openapi.dev-url: https://aurigraphfarmers-api.atparui.com
      app.file.target.dir: /mnt
      resource.location: file:/mnt/content/
      twilio.account.sid: AC163c0c85cefaf8f3d7dafb1b90502144
      twilio.auth.token: 3465e4c7b703ccc296ff12ad1ccf31d4
      twilio.phone.number: +19047340926

    volumes:
      - ./data/acm-content:/mnt/content
  # ACM Frontend
  frontend:
    image: shivain22/farmer-auri:v5.2
    container_name: acm-frontend
    restart: always
    ports:
      - "3005:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://aurigraph-farmers-app:8080
      NEXT_PUBLIC_OFBIZ_API_URL: http://ofbiz:8089



  # NGINX Reverse Proxy
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    restart: always
#    ports:
#      - "80:80"
#      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
